{"objectClass":"NSDictionary","root":{"objectClass":"MindNode","ID":"3YS3P","rootPoint":{"objectClass":"CGPoint","x":415,"y":1044.75},"lineColorHex":"#BBBBBB","children":{"0":{"objectClass":"MindNode","ID":"44G8C","lineColorHex":"#DC306C","children":{"0":{"objectClass":"MindNode","ID":"OLB8T","lineColorHex":"#DC306C","children":{"0":{"objectClass":"MindNode","ID":"1SP7X","lineColorHex":"#DC306C","text":"1: 当观察一个对象时，runtime会动态创建继承自该对象的类，并重写被观察对象的setter方法"},"1":{"objectClass":"MindNode","ID":"P50GK","lineColorHex":"#DC306C","text":"2 ：重写的setter方法会负责在调用原setter方法前后通知所有观察对象值得更改"},"2":{"objectClass":"MindNode","ID":"E5T66","lineColorHex":"#DC306C","text":"3: 最后会把该对象的isa指针指向这个创建的子类，对象就变成子类的实例"},"objectClass":"NSArray"},"text":"kvo原理"},"1":{"objectClass":"MindNode","ID":"75W1I","lineColorHex":"#DC306C","children":{"0":{"objectClass":"MindNode","ID":"Z6M25","lineColorHex":"#DC306C","text":"1 ：在对成员变量直接赋值的时候，在它之前和之后分别添加.在setter方法里，手动实现NSObject两个方法："},"1":{"objectClass":"MindNode","ID":"8P9WI","lineColorHex":"#DC306C","text":"2: willChangeValueForKey、 \n     didChangeValueForKey"},"2":{"objectClass":"MindNode","ID":"S2H82","lineColorHex":"#DC306C","text":"3: 在系统内部实现当中会触发KVO的回调方法observeValueForKeyPath:ofObject:change:context:方法"},"objectClass":"NSArray"},"text":"手动触发kvo"},"2":{"objectClass":"MindNode","ID":"P5318","lineColorHex":"#DC306C","children":{"0":{"objectClass":"MindNode","ID":"A7M8P","lineColorHex":"#DC306C","text":"1: 继承自NSObject的类，或者直接willset/didset实现。"},"objectClass":"NSArray"},"text":"swift的kvo"},"3":{"objectClass":"MindNode","ID":"326T7","lineColorHex":"#DC306C","children":{"0":{"objectClass":"MindNode","ID":"XZ3EV","lineColorHex":"#DC306C","text":"1: KVO是Key-value observing的缩写。\n2: KVO是Objective-C对观察者设计模式的一种实现。\n3: 系统使用isa混写技术(isa-swizzling)来实现KVO。"},"objectClass":"NSArray"},"text":"KVO的概念"},"4":{"objectClass":"MindNode","ID":"J3E61","lineColorHex":"#DC306C","children":{"0":{"objectClass":"MindNode","ID":"RG07F","lineColorHex":"#DC306C","text":"1: 调用KVO监听obj的value属性的变化，obj通过setter方法修改value"},"1":{"objectClass":"MindNode","ID":"Y7181","lineColorHex":"#DC306C","children":{"0":{"objectClass":"MindNode","ID":"9L8E5","lineColorHex":"#DC306C","text":"调用到obj对象的setter方法，系统为我们重写了setter方法可以实现KVO"},"objectClass":"NSArray"},"text":"2: 通过KVC设置value，即使用setValue:forKey:改变value"},"2":{"objectClass":"MindNode","ID":"OUWD7","lineColorHex":"#DC306C","text":"3: 成员变量直接修改需要手动添加KVO才会生效"},"objectClass":"NSArray"},"text":"KVO生效的三种场景"},"objectClass":"NSArray"},"text":"KVO(key-Value-Observing)：键值观察机制"},"1":{"objectClass":"MindNode","ID":"06297","lineColorHex":"#26BBFF","children":{"0":{"objectClass":"MindNode","ID":"SPI8V","lineColorHex":"#26BBFF","children":{"0":{"objectClass":"MindNode","ID":"UN35L","lineColorHex":"#26BBFF","text":"当一个对象调用setValue方法时，方法内部会做以下操作："},"1":{"objectClass":"MindNode","ID":"2Q6CH","lineColorHex":"#26BBFF","text":"1). 检查是否存在相应的key的set方法，如果存在，就调用set方法。"},"2":{"objectClass":"MindNode","ID":"Y2D71","lineColorHex":"#26BBFF","text":"2). 如果set方法不存在，就会查找与key相同名称并且带下划线的成员变量，如果有，则直接给成员变量属性赋值。"},"3":{"objectClass":"MindNode","ID":"V26NQ","lineColorHex":"#26BBFF","text":"3). 如果没有找到_key，就会查找相同名称的属性key，如果有就直接赋值。"},"4":{"objectClass":"MindNode","ID":"FPC77","lineColorHex":"#26BBFF","text":"4). 如果还没有找到，则调用valueForUndefinedKey:和setValue:forUndefinedKey:方法。"},"5":{"objectClass":"MindNode","ID":"8P40R","lineColorHex":"#26BBFF","text":"这些方法的默认实现都是抛出异常，我们可以根据需要重写它们。"},"objectClass":"NSArray"},"text":"底层实现"},"1":{"objectClass":"MindNode","ID":"E3QS6","lineColorHex":"#26BBFF","children":{"0":{"objectClass":"MindNode","ID":"L27RC","lineColorHex":"#26BBFF","text":"1: - (nullable id)valueForKey:(NSString *)key;"},"1":{"objectClass":"MindNode","ID":"P2K31","lineColorHex":"#26BBFF","text":"2: - (void)setValue:(nullable id)value forKey:(NSString *)key;"},"objectClass":"NSArray"},"text":"KVC的概念"},"2":{"objectClass":"MindNode","ID":"484Z5","lineColorHex":"#26BBFF","children":{"0":{"objectClass":"MindNode","ID":"KO3PN","lineColorHex":"#26BBFF","text":"key没有任何限制，如果已知某个类或者实例的内部某个私有成员变量名称的话，我们在外界是可以通过已知的key来访问和设置。即破坏了面向对象的编程思想。"},"objectClass":"NSArray"},"text":"破坏面向对象的编程方法"},"objectClass":"NSArray"},"text":"KVC (Key-Value-Coding)：键值编码 是一种通过字符串间接访问对象的方式（即给属性赋值）"},"objectClass":"NSArray"},"text":"kvo和kvc\n"}}