{"objectClass":"NSDictionary","root":{"objectClass":"MindNode","ID":"H2988","rootPoint":{"objectClass":"CGPoint","x":415,"y":507.5},"lineColorHex":"#BBBBBB","children":{"0":{"objectClass":"MindNode","ID":"V5V32","lineColorHex":"#37C45A","text":"组件化的实施，中间件的设计"},"1":{"objectClass":"MindNode","ID":"XIHYU","lineColorHex":"#26BBFF","text":"哈希表的实现原理"},"2":{"objectClass":"MindNode","ID":"2S746","lineColorHex":"#1BD6E7","text":"ReactiveCocoa的热信号与冷信号"},"3":{"objectClass":"MindNode","ID":"3H49Y","lineColorHex":"#FFC700","text":"缓存架构设计LRU方案"},"4":{"objectClass":"MindNode","ID":"N6473","lineColorHex":"#DC306C","children":{"0":{"objectClass":"MindNode","ID":"33U11","lineColorHex":"#DC306C","children":{"0":{"objectClass":"MindNode","ID":"G4LL6","lineColorHex":"#DC306C","children":{"0":{"objectClass":"MindNode","ID":"54ONR","lineColorHex":"#DC306C","text":"Model View Control，把模型 视图 控制器 层进行解耦合编写"},"objectClass":"NSArray"},"text":"MVC模式"},"1":{"objectClass":"MindNode","ID":"7YQ2Z","lineColorHex":"#DC306C","children":{"0":{"objectClass":"MindNode","ID":"45SIF","lineColorHex":"#DC306C","text":"Model View ViewModel 把模型 视图 业务逻辑 层进行解耦和编写（其本质是给控制器减负，将一些弱业务逻辑放到VM中去处理）"},"objectClass":"NSArray"},"text":"MVVM模式"},"2":{"objectClass":"MindNode","ID":"X6G00","lineColorHex":"#DC306C","children":{"0":{"objectClass":"MindNode","ID":"ONQFD","lineColorHex":"#DC306C","text":"通过static关键词，声明全局变量。在整个进程运行期间只会被赋值一次。"},"objectClass":"NSArray"},"text":"单例模式"},"3":{"objectClass":"MindNode","ID":"QTD2K","lineColorHex":"#DC306C","children":{"0":{"objectClass":"MindNode","ID":"X28R4","lineColorHex":"#DC306C","text":"KVO是典型的通知模式，观察某个属性的状态，状态发生变化时通知观察者"},"objectClass":"NSArray"},"text":"观察者模式"},"4":{"objectClass":"MindNode","ID":"S1WJ1","lineColorHex":"#DC306C","children":{"0":{"objectClass":"MindNode","ID":"6JPYX","lineColorHex":"#DC306C","text":"代理+协议的组合。实现1对1的反向传值操作"},"objectClass":"NSArray"},"text":"委托模式"},"5":{"objectClass":"MindNode","ID":"TP786","lineColorHex":"#DC306C","children":{"0":{"objectClass":"MindNode","ID":"4O6V7","lineColorHex":"#DC306C","text":"通过一个类方法，批量的根据已有模板生产对象"},"objectClass":"NSArray"},"text":"工厂模式"},"objectClass":"NSArray"},"text":"设计模式是一种编码经验，就是用比较成熟的逻辑去处理某一种类型的事情"},"objectClass":"NSArray"},"text":"设计模式是什么"},"objectClass":"NSArray"},"text":"设计模式与架构"}}